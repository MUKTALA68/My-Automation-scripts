# import self

__author__='srikantm'

import sys

sys.path.append('C:\clientapp_test\webapps\printme')
from time import sleep
import printme_common
import printme_settings
import locators
import unittest2
import allure
import pytest
import os
from selenium import webdriver
import csv
from selenium.webdriver.firefox.firefox_profile import FirefoxProfile
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

global filenames, docid

class UploadFiles (unittest2.TestCase):
#class Static_Pages:
    def setUp(self):
        #self.driver = webdriver.Firefox()
        self.driver = webdriver.Chrome()
        #self.driver = webdriver.Opera()
        #self.driver = webdriver.Ie()
        self.driver.maximize_window()
        printme_common.LaunchWebsite(self.driver)

    def test_case001_Verify_GetStarted(self):
        ps = printme_settings.printme(self.driver)
        self.assertTrue(ps.getStarted.is_displayed(), "Get Started button is not available")
        self.driver.quit()

    @pytest.allure.testcase('test_case002')
    def test_case002_Upload_PDF_file(self):
        ps = printme_settings.printme(self.driver)
        ps.getStarted.click()
        sleep(5)
        self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
        # self.assertTrue(ps.upload_files_btn.is_displayed(), "Upload Files button is not available")
        # ps.upload_files_btn.click()
        path = os.getcwd()
        path += str("\\files")
        # path += str("\\files\\png.png")
        print(path)
        global filenames
        filenames = "pdf.pdf"
        printme_settings.file_upload(self.driver, locators.upload_files, path, filenames)
        sleep(10)
        ps.email_releasecode.send_keys("manasakadire@gmail.com")
        sleep(5)
        ps.send_btn.click()
        sleep(5)
        global docid
        sleep(5)
        docid = ps.doc_id.text
        print(docid)
        # ps.printme_logo.click()
        sleep(5)
        self.driver.quit()

    @pytest.allure.testcase('test_case003')
    def test_case003_Apps_and_drivers(self):
        ps = printme_settings.printme(self.driver)
        ps.explore_drpdwn.click()
        sleep(5)
        self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
        self.assertTrue(ps.Apps_and_drivers.is_displayed(), "Apps and drivers is not available")
        ps.Apps_and_drivers.click()
        sleep(5)
        self.driver.quit()

    @pytest.allure.testcase('test_case004')
    def test_case004_PrintMe_for_business(self):
        ps=printme_settings.printme(self.driver)
        ps.explore_drpdwn.click()
        sleep(5)
        self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
        self.assertTrue(ps.PrintMe_for_business.is_displayed(), "PrintMe for business is not available")
        ps.PrintMe_for_business.click()
        sleep(5)
        self.driver.quit()

    @pytest.allure.testcase('test_case005')
    def test_case005_Locate_a_printer(self):
        ps=printme_settings.printme(self.driver)
        ps.explore_drpdwn.click()
        sleep(5)
        self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
        self.assertTrue(ps.Locate_a_printer.is_displayed(), "Locate a printer is not available")
        ps.Locate_a_printer.click()
        sleep(5)
        self.driver.quit()

    @pytest.allure.testcase('test_case006')
    def test_case006_Support(self):
        sleep(5)
        ps=printme_settings.printme(self.driver)
        self.assertTrue(ps.support_drpdwn.is_displayed(), "Support button is not available")
        ps.support_drpdwn.click()
        sleep(5)
        self.driver.quit()

    @pytest.allure.testcase('test_case007')
    def test_case007_FAQs(self):
        ps=printme_settings.printme(self.driver)
        ps.support_drpdwn.click()
        sleep(5)
        self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
        self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
        ps.FAQs.click()
        sleep(5)
        self.driver.quit()

    @pytest.allure.testcase('test_case008')
    def test_case008_Service_status(self):
        ps=printme_settings.printme(self.driver)
        ps.support_drpdwn.click()
        sleep(5)
        self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
        self.assertTrue(ps.Service_status.is_displayed(), "Service status is not available")
        ps.Service_status.click()
        sleep(5)
        self.driver.quit()

    @pytest.allure.testcase('test_case009')
    def test_case009_Support_center(self):
        ps=printme_settings.printme(self.driver)
        ps.support_drpdwn.click()
        sleep(5)
        self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
        self.assertTrue(ps.Support_center.is_displayed(), "Support center is not available")
        ps.Support_center.click()
        sleep(10)
        self.driver.quit()

    @pytest.allure.testcase('test_case010')
    def test_case010_Global(self):
        sleep(5)
        ps=printme_settings.printme(self.driver)
        self.assertTrue(ps.Global_drpdwn.is_displayed(), "Global button is not available")
        ps.Global_drpdwn.click()
        sleep(5)
        self.driver.quit()

    # @pytest.allure.testcase('test_case011')
    # def test_case011_English(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.Global_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.English.is_displayed(), "English is not available")
    #     ps.English.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case012')
    # def test_case012_English_International(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.Global_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.English_International.is_displayed(), "English International is not available")
    #     ps.English_International.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case013')
    # def test_case013_Francis(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.Global_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.Francis.is_displayed(), "Francis is not available")
    #     ps.Francis.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case014')
    # def test_case014_Italiano(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.Global_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.Italiano.is_displayed(), "Italiano is not available")
    #     ps.Italiano.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case015')
    # def test_case015_Deutsch(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.Global_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.Deutsch.is_displayed(), "Deutsch is not available")
    #     ps.Deutsch.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case016')
    # def test_case016_Espanol(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.Global_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.Espanol.is_displayed(), "Espanol is not available")
    #     ps.Espanol.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case017')
    # def test_case017_Nederlands(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.Global_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.Nederlands.is_displayed(), "Nederlands is not available")
    #     ps.Nederlands.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case018')
    # def test_case018_Portuguese_brasil(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.Global_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.Portuguese_brasil.is_displayed(), "Portuguese_brasil is not available")
    #     ps.Portuguese_brasil.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case019')
    # def test_case019_Learn_more(self):
    #     sleep(5)
    #     ps=printme_settings.printme(self.driver)
    #     self.assertTrue(ps.Learn_more.is_displayed(), "Learn more is not available")
    #     ps.Learn_more.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case020')
    # def test_case020_Download_apps_and_drivers(self):
    #     sleep(5)
    #     ps=printme_settings.printme(self.driver)
    #     self.assertTrue(ps.Download_apps_and_drivers.is_displayed(), "Download apps and drivers is not available")
    #     ps.Download_apps_and_drivers.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case021')
    # def test_case021_Web_release(self):
    #     sleep(5)
    #     ps=printme_settings.printme(self.driver)
    #     self.assertTrue(ps.Web_release.is_displayed(), "Web release is not available")
    #     #driver.findElement(By.linkText("Web_release")).click()
    #     ps.Web_release.click()
    #     sleep(15)
    #
    # @pytest.allure.testcase('test_case022')
    # def test_case022_Terms_of_use(self):
    #     sleep(5)
    #     ps=printme_settings.printme(self.driver)
    #     self.assertTrue(ps.Terms_of_use.is_displayed(), "Terms of use is not available")
    #     ps.Terms_of_use.click()
    #     sleep(15)
    #
    # @pytest.allure.testcase('test_case023')
    # def test_case023_Privacy_policy(self):
    #     sleep(5)
    #     ps=printme_settings.printme(self.driver)
    #     self.assertTrue(ps.Privacy_policy.is_displayed(), "Privacy policy is not available")
    #     ps.Privacy_policy.click()
    #     sleep(15)
    #
    # @pytest.allure.testcase('test_case024')
    # def test_case024_Contact_us(self):
    #     sleep(5)
    #     ps=printme_settings.printme(self.driver)
    #     self.assertTrue(ps.Contact_us.is_displayed(), "Contact us is not available")
    #     ps.Contact_us.click()
    #     sleep(15)
    #
    # @pytest.allure.testcase('test_case025')
    # def test_case025_Copyright(self):
    #     sleep(5)
    #     ps=printme_settings.printme(self.driver)
    #     self.assertTrue(ps.Copyright.is_displayed(), "Copyright is not available")
    #     ps.Copyright.click()
    #     sleep(15)
    #
    # @pytest.allure.testcase('test_case26')
    # def test_case026_Download_the_iOS_app(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.explore_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.Apps_and_drivers.is_displayed(), "Apps and drivers is not available")
    #     ps.Apps_and_drivers.click()
    #     sleep(5)
    #     self.assertTrue(ps.Download_the_iOS_app.is_displayed(), "Download the iOS app is not available")
    #     ps.Download_the_iOS_app.click()
    #     sleep(10)
    #
    # @pytest.allure.testcase('test_case27')
    # def test_case027_Download_the_Android_app(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.explore_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.Apps_and_drivers.is_displayed(), "Apps and drivers is not available")
    #     ps.Apps_and_drivers.click()
    #     sleep(5)
    #     self.assertTrue(ps.Download_the_Android_app.is_displayed(), "Download the Android app is not available")
    #     ps.Download_the_Android_app.click()
    #     sleep(10)
    #
    # @pytest.allure.testcase('test_case28')
    # def test_case028_Supports_OSX_and_above(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.explore_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.Apps_and_drivers.is_displayed(), "Apps and drivers is not available")
    #     ps.Apps_and_drivers.click()
    #     sleep(5)
    #     self.assertTrue(ps.Supports_OSX_and_above.is_displayed(),"Download OSX and above is not available")
    #     ps.Supports_OSX_and_above.click()
    #     sleep(20)
    #
    # @pytest.allure.testcase('test_case29')
    # def test_case029_Supports_Windows_and_above(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.explore_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.Apps_and_drivers.is_displayed(), "Apps and drivers is not available")
    #     ps.Apps_and_drivers.click()
    #     sleep(5)
    #     self.assertTrue(ps.Supports_Windows_and_10.is_displayed(), "Supports Windows 7 9 and 10 is not available")
    #     ps.Supports_Windows_and_10.click()
    #     sleep(20)
    #
    # @pytest.allure.testcase('test_case030')
    # def test_case030_Learn_more_efi_product(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.explore_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.PrintMe_for_business.is_displayed(), "PrintMe for business is not available")
    #     ps.PrintMe_for_business.click()
    #     sleep(5)
    #     self.assertTrue(ps.Learn_more.is_displayed(), "Learn more is not available")
    #     ps.Learn_more.click()
    #     sleep(12)
    #
    # @pytest.allure.testcase('test_case031')
    # def test_case031_PrintMe_Service_Works(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_Service_Works.is_displayed(), "How does the PrintMe service work? not available")
    #     ps.PrintMe_Service_Works.click()
    #     sleep(5)
    #     self.assertTrue(ps.this_site.is_displayed(), "this site is not available")
    #     ps.this_site.click()
    #     sleep(8)
    #
    # @pytest.allure.testcase('test_case032')
    # def test_case032_Install_PrintMe(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.Install_PrintMe.is_displayed(), "What do I need to install to use the PrintMe service")
    #     ps.Install_PrintMe.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case033')
    # def test_case033_Cost_PrintMe(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.Cost_PrintMe.is_displayed(), "What does it cost to use the PrintMe service?")
    #     ps.Cost_PrintMe.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case034')
    # def test_case034_File_types_and_sizes(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.File_types_and_sizes.is_displayed(), "What file types and file size can I use with the P")
    #     ps.File_types_and_sizes.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case035')
    # def test_case035_Print_Documents(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.Print_Documents.is_displayed(), "Do I need to know in advance where I will print my")
    #     ps.Print_Documents.click()
    #     sleep(5)
    #     self.assertTrue(ps.Interactive_Map.is_displayed(), "Interactive map is not available")
    #     ps.Interactive_Map.click()
    #     sleep(10)
    #
    # @pytest.allure.testcase('test_case036')
    # def test_case036_Locate_PrintMe_enabled(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.Locate_PrintMe_enabled.is_displayed(), "Do I need to know in advance where I will print my")
    #     ps.Locate_PrintMe_enabled.click()
    #     sleep(5)
    #     self.assertTrue(ps.Interactive_Map1.is_displayed(), "Interactive map is not available")
    #     ps.Interactive_Map1.click()
    #     sleep(10)
    #
    # @pytest.allure.testcase('test_case037')
    # def test_case037_Long_Print_Documents(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.Long_Print_Documents.is_displayed(), "How long do I have to print my documents?")
    #     ps.Long_Print_Documents.click()
    #     sleep(8)
    #
    # @pytest.allure.testcase('test_case038')
    # def test_case038_PrintMe_account(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_account.is_displayed(), "Do I need a PrintMe account?")
    #     ps.PrintMe_account.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case039')
    # def test_case039_PrintMe_app(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_app.is_displayed(), "Do I need the PrintMe app?")
    #     ps.PrintMe_app.click()
    #     sleep(5)
    #     self.assertTrue(ps.this_website.is_displayed(), "this website is not available")
    #     ps.this_website.click()
    #     sleep(8)
    #
    # @pytest.allure.testcase('test_case040')
    # def test_case040_Print_boarding_pass(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.Print_boarding_pass.is_displayed(), "How can I print a boarding pass?")
    #     ps.Print_boarding_pass.click()
    #     sleep(10)
    #
    # @pytest.allure.testcase('test_case041')
    # def test_case041_PrintMe_mobile_apps(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_mobile_apps.is_displayed(), "PrintMe mobile apps is not available")
    #     ps.PrintMe_mobile_apps.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case042')
    # def test_case042_PrintMe_benefits(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_mobile_apps.is_displayed(), "PrintMe mobile apps is not available")
    #     ps.PrintMe_mobile_apps.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_benefits.is_displayed(), "What are the benefits of using the PrintMe apps?is not available")
    #     ps.PrintMe_benefits.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case043')
    # def test_case043_Mobile_boarding_pass(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_mobile_apps.is_displayed(), "PrintMe mobile apps is not available")
    #     ps.PrintMe_mobile_apps.click()
    #     sleep(5)
    #     self.assertTrue(ps.Mobile_boarding_pass.is_displayed(), "How can I print a boarding pass using the mobile a")
    #     ps.Mobile_boarding_pass.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case044')
    # def test_case044_Share_menu(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_mobile_apps.is_displayed(), "PrintMe mobile apps is not available")
    #     ps.PrintMe_mobile_apps.click()
    #     sleep(5)
    #     self.assertTrue(ps.Share_menu.is_displayed(), "How do I make PrintMe appear in the Share menu on ")
    #     ps.Share_menu.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case045')
    # def test_case045_PrintMe_drs(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_drs.is_displayed(), "PrintMe drivers is not available")
    #     ps.PrintMe_drs.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case046')
    # def test_case046_PrintMe_drs_benefits(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_drs.is_displayed(), "PrintMe drivers is not available")
    #     ps.PrintMe_drs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_drs_benefits.is_displayed(), "What are the benefits of using the PrintMe drivers")
    #     ps.PrintMe_drs_benefits.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case047')
    # def test_case047_PrintMe_drs_upload(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_drs.is_displayed(), "PrintMe drivers is not available")
    #     ps.PrintMe_drs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_drs_upload.is_displayed(), "How do I upload a file using the PrintMe driver?")
    #     ps.PrintMe_drs_upload.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case048')
    # def test_case048_PrintMe_drs_boarding(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_drs.is_displayed(), "PrintMe drivers is not available")
    #     ps.PrintMe_drs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_drs_boarding.is_displayed(), "How can I print a boarding pass using the PrintMe")
    #     ps.PrintMe_drs_boarding.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case049')
    # def test_case049_PrintMe_drs_install(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_drs.is_displayed(), "PrintMe drivers is not available")
    #     ps.PrintMe_drs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_drs_install.is_displayed(), "Can I install the PrintMe driver with a script?")
    #     ps.PrintMe_drs_install.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case050')
    # def test_case050_PrintMe_Embedded(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_Embedded.is_displayed(), "PrintMe Embedded is not available")
    #     ps.PrintMe_Embedded.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case051')
    # def test_case051_PrintMe_Canon(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_Embedded.is_displayed(), "PrintMe drivers is not available")
    #     ps.PrintMe_Embedded.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_Canon.is_displayed(), "Does my Canon engine support PrintMe Embedded?")
    #     ps.PrintMe_Canon.click()
    #     sleep(5)
    #     self.assertTrue(ps.Canon_website.is_displayed(), "Canon website is not available")
    #     ps.Canon_website.click()
    #     sleep(10)
    #
    # @pytest.allure.testcase('test_case052')
    # def test_case052_PrintMe_Security(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_Security.is_displayed(), "PrintMe Security is not available")
    #     ps.PrintMe_Security.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case053')
    # def test_case053_PrintMe_secure(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_Security.is_displayed(), "PrintMe Security is not available")
    #     ps.PrintMe_Security.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_secure.is_displayed(), "PrintMe secure is not available")
    #     ps.PrintMe_secure.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case054')
    # def test_case054_PrintMe_Support(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_Support.is_displayed(), "PrintMe Support is not available")
    #     ps.PrintMe_Support.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case055')
    # def test_case055_PrintMe_secure(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_Support.is_displayed(), "PrintMe Support is not available")
    #     ps.PrintMe_Support.click()
    #     sleep(5)
    #     self.assertTrue(ps.Status_page.is_displayed(), "Status page is not available")
    #     ps.Status_page.click()
    #     sleep(5)
    #
    # @pytest.allure.testcase('test_case056')
    # def test_case056_EFI_Smart_Support(self):
    #     ps=printme_settings.printme(self.driver)
    #     ps.support_drpdwn.click()
    #     sleep(5)
    #     self.driver.find_element_by_xpath("//*[contains(@src,'assets/img/PM-efi-Logo2.svg')]")
    #     self.assertTrue(ps.FAQs.is_displayed(), "FAQs is not available")
    #     ps.FAQs.click()
    #     sleep(5)
    #     self.assertTrue(ps.PrintMe_Support.is_displayed(), "PrintMe Support is not available")
    #     ps.PrintMe_Support.click()
    #     sleep(5)
    #     self.assertTrue(ps.EFI_Smart_Support.is_displayed(), "EFI Smart Support is not available")
    #     ps.EFI_Smart_Support.click()
    #     sleep(10)
    #     self.assertTrue(ps.PrintMe_experience.is_displayed(), "PrintMe experience is not available")
    #     ps.PrintMe_experience.click()
    #     sleep(5)
    #
    # def tearDown(self):
    #     self.driver.quit()
